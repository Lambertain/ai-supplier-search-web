import 'dotenv/config';
import { prepareSearchQuery } from './src/services/translationService.js';
import { searchSuppliers } from './src/services/googleSearchService.js';
import { chatCompletionJson } from './src/services/openaiService.js';

console.log('='.repeat(70));
console.log('–¢–ï–°–¢ –ü–û–®–£–ö–£ –ó –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ú –ü–ï–†–ï–ö–õ–ê–î–û–ú');
console.log('='.repeat(70));
console.log('');

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const GOOGLE_SEARCH_ENGINE_ID = process.env.GOOGLE_SEARCH_ENGINE_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!GOOGLE_API_KEY || !GOOGLE_SEARCH_ENGINE_ID || !OPENAI_API_KEY) {
  console.error('–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤—Å—ñ API –∫–ª—é—á—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
  process.exit(1);
}

// –¢–µ—Å—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –æ–ø–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç—É
const testCases = [
  {
    productDescription: 'LED —Å–≤—ñ—Ç–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –æ—Ñ—ñ—Å—É',
    preferredRegion: 'china',
    name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∑–∞–ø–∏—Ç ‚Üí –ö–∏—Ç–∞–π'
  },
  {
    productDescription: '–ö–µ—Ä–∞–º—ñ—á–Ω—ñ —á–∞—à–∫–∏ –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º',
    preferredRegion: 'china',
    name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∑–∞–ø–∏—Ç ‚Üí –ö–∏—Ç–∞–π'
  }
];

async function runTest(testCase) {
  console.log('='.repeat(70));
  console.log(`–¢–ï–°–¢: ${testCase.name}`);
  console.log('='.repeat(70));
  console.log('');
  console.log(`–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç: "${testCase.productDescription}"`);
  console.log(`–†–µ–≥—ñ–æ–Ω: ${testCase.preferredRegion}`);
  console.log('');

  try {
    // –ö–†–û–ö 1: –ü–µ—Ä–µ–∫–ª–∞–¥
    console.log('–ö–†–û–ö 1: –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É –Ω–∞ –º–æ–≤—É —Ä–µ–≥—ñ–æ–Ω—É...');
    const startTranslation = Date.now();

    const translationResult = await prepareSearchQuery(
      testCase.productDescription,
      testCase.preferredRegion,
      OPENAI_API_KEY
    );

    const translationDuration = ((Date.now() - startTranslation) / 1000).toFixed(2);

    console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${translationDuration} —Å–µ–∫`);
    console.log(`   –û—Ä–∏–≥—ñ–Ω–∞–ª: "${translationResult.original}"`);
    console.log(`   –ü–µ—Ä–µ–∫–ª–∞–¥: "${translationResult.translated}"`);
    console.log(`   –ú–æ–≤–∞: ${translationResult.language}`);
    console.log(`   –ë—É–ª–æ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ: ${translationResult.wasTranslated ? '–¢–∞–∫' : '–ù—ñ'}`);
    console.log('');

    // –ö–†–û–ö 2: Google Search –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
    console.log('–ö–†–û–ö 2: Google Search –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º...');
    const searchQuery = `${translationResult.translated} supplier manufacturer ${testCase.preferredRegion} B2B wholesale`;
    console.log(`Query: "${searchQuery}"`);
    console.log('');

    const startGoogle = Date.now();
    const googleResults = await searchSuppliers({
      query: searchQuery,
      maxResults: 10,
      apiKey: GOOGLE_API_KEY,
      searchEngineId: GOOGLE_SEARCH_ENGINE_ID
    });
    const googleDuration = ((Date.now() - startGoogle) / 1000).toFixed(2);

    console.log(`‚úÖ Google Search –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${googleDuration} —Å–µ–∫`);
    console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ: ${googleResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
    console.log('');

    if (googleResults.length > 0) {
      console.log('–¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
      googleResults.slice(0, 3).forEach((r, i) => {
        console.log(`${i + 1}. ${r.title}`);
        console.log(`   URL: ${r.link}`);
        console.log('');
      });
    }

    // –ö–†–û–ö 3: –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT
    console.log('–ö–†–û–ö 3: –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —á–µ—Ä–µ–∑ GPT...');

    const googleResultsContext = googleResults.map((result, index) => ({
      index: index + 1,
      title: result.title,
      link: result.link,
      snippet: result.snippet,
      displayLink: result.displayLink
    }));

    const structuringPrompt = {
      role: 'system',
      content: `You are a procurement assistant that structures supplier information from Google Search results.

CRITICAL RULES:
1. ONLY use information from the provided Google Search results
2. DO NOT invent or hallucinate any company names, emails, or contact information
3. Extract company name from the website domain or title
4. Use the website link directly from Google results

OUTPUT FORMAT: JSON object with "suppliers" array containing 5-10 suppliers.

Each supplier MUST have:
- company_name: Extract from domain or title (REQUIRED)
- website: Direct link from Google (REQUIRED)
- email: Only if found in snippet, otherwise empty string
- phone: Only if found in snippet, otherwise empty string
- country: Infer from domain or use "${testCase.preferredRegion}"
- manufacturing_capabilities: Infer from product mentions in snippet`
    };

    const userPrompt = {
      role: 'user',
      content: `Here are ${googleResults.length} REAL supplier search results from Google. Structure them into the supplier format.

GOOGLE SEARCH RESULTS:
${JSON.stringify(googleResultsContext, null, 2)}

Return ONLY suppliers that match the product requirements. Prioritize results with clear B2B/manufacturer indicators.`
    };

    const startGPT = Date.now();
    const structuredSuppliers = await chatCompletionJson({
      model: 'gpt-4o-mini',
      messages: [structuringPrompt, userPrompt],
      temperature: 0.3,
      maxTokens: 4000,
      apiKey: OPENAI_API_KEY
    });
    const gptDuration = ((Date.now() - startGPT) / 1000).toFixed(2);

    const suppliers = structuredSuppliers.suppliers || [];

    console.log(`‚úÖ GPT —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${gptDuration} —Å–µ–∫`);
    console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${suppliers.length}`);
    console.log('');

    if (suppliers.length > 0) {
      console.log('–ü–µ—Ä—à—ñ 3 –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏:');
      suppliers.slice(0, 3).forEach((s, i) => {
        console.log(`${i + 1}. ${s.company_name}`);
        console.log(`   –ö—Ä–∞—ó–Ω–∞: ${s.country}`);
        console.log(`   –í–µ–±-—Å–∞–π—Ç: ${s.website || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
        console.log('');
      });
    }

    console.log('='.repeat(70));
    console.log('–ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£:');
    console.log('='.repeat(70));
    console.log(`‚è±Ô∏è  –ü–µ—Ä–µ–∫–ª–∞–¥: ${translationDuration} —Å–µ–∫`);
    console.log(`‚è±Ô∏è  Google Search: ${googleDuration} —Å–µ–∫`);
    console.log(`‚è±Ô∏è  GPT –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è: ${gptDuration} —Å–µ–∫`);
    console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª–æ–º: ${((Date.now() - startTranslation) / 1000).toFixed(2)} —Å–µ–∫`);
    console.log(`üìä Google —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${googleResults.length}`);
    console.log(`üìä –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${suppliers.length}`);
    console.log('');

    return {
      success: true,
      googleResults: googleResults.length,
      suppliers: suppliers.length,
      wasTranslated: translationResult.wasTranslated,
      totalTime: ((Date.now() - startTranslation) / 1000).toFixed(2)
    };

  } catch (error) {
    console.error('');
    console.error('‚ùå –ü–û–ú–ò–õ–ö–ê:', error.message);
    if (error.stack) {
      console.error('Stack:', error.stack);
    }
    console.error('');
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function runAllTests() {
  console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –ø–æ—à—É–∫—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º...');
  console.log('');

  const results = [];

  for (const testCase of testCases) {
    const result = await runTest(testCase);
    results.push({ testCase, result });

    // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    if (testCases.indexOf(testCase) < testCases.length - 1) {
      console.log('–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏...');
      console.log('');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  console.log('='.repeat(70));
  console.log('–ó–ê–ì–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò');
  console.log('='.repeat(70));
  console.log('');

  results.forEach(({ testCase, result }) => {
    console.log(`${testCase.name}:`);
    if (result.success) {
      console.log(`  ‚úÖ –£—Å–ø—ñ—à–Ω–æ`);
      console.log(`  üìä Google —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${result.googleResults}`);
      console.log(`  üìä –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${result.suppliers}`);
      console.log(`  üåê –ë—É–ª–æ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ: ${result.wasTranslated ? '–¢–∞–∫' : '–ù—ñ'}`);
      console.log(`  ‚è±Ô∏è  –ß–∞—Å: ${result.totalTime} —Å–µ–∫`);
    } else {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${result.error}`);
    }
    console.log('');
  });

  const successCount = results.filter(r => r.result.success).length;
  console.log(`üéâ –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û: ${successCount}/${results.length} —É—Å–ø—ñ—à–Ω–∏—Ö`);
  console.log('');
}

runAllTests().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});
