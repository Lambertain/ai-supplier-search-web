import 'dotenv/config';
import { scrapeSupplierContacts, enrichSuppliersWithContacts } from './src/services/contactScraperService.js';

console.log('='.repeat(70));
console.log('–¢–ï–°–¢ –°–ö–†–ê–ü–Ü–ù–ì–£ –ö–û–ù–¢–ê–ö–¢–Ü–í –ó –°–ê–ô–¢–Ü–í –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–Ü–í');
console.log('='.repeat(70));
console.log('');

// –¢–µ—Å—Ç–æ–≤—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —Å–∞–π—Ç–∞–º–∏ B2B
const testSuppliers = [
  {
    company_name: 'Made-in-China.com',
    website: 'https://www.made-in-china.com',
    email: '',
    phone: ''
  },
  {
    company_name: 'Global Sources',
    website: 'https://www.globalsources.com',
    email: '',
    phone: ''
  },
  {
    company_name: 'Alibaba',
    website: 'https://www.alibaba.com',
    email: '',
    phone: ''
  }
];

async function testSingleScraping() {
  console.log('='.repeat(70));
  console.log('–¢–ï–°–¢ 1: –°–∫—Ä–∞–ø—ñ–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç—É');
  console.log('='.repeat(70));
  console.log('');

  const testUrl = 'https://www.made-in-china.com';
  console.log(`–°–∞–π—Ç: ${testUrl}`);
  console.log('');

  try {
    const startTime = Date.now();
    const contacts = await scrapeSupplierContacts(testUrl);
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    console.log('‚úÖ –°–∫—Ä–∞–ø—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞', duration, '—Å–µ–∫');
    console.log('');
    console.log('–ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:');
    console.log(`  üìß Email: ${contacts.email || '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
    console.log(`  üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${contacts.phone || '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
    console.log(`  üè† –ê–¥—Ä–µ—Å–∞: ${contacts.address || '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
    console.log(`  ‚è∞ –ß–∞—Å —Å–∫—Ä–∞–ø—ñ–Ω–≥—É: ${contacts.scrapedAt}`);
    console.log('');

    return contacts;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.error('');
    return null;
  }
}

async function testBatchScraping() {
  console.log('='.repeat(70));
  console.log('–¢–ï–°–¢ 2: –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏');
  console.log('='.repeat(70));
  console.log('');

  console.log(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${testSuppliers.length}`);
  console.log('');

  testSuppliers.forEach((supplier, i) => {
    console.log(`${i + 1}. ${supplier.company_name}`);
    console.log(`   –í–µ–±-—Å–∞–π—Ç: ${supplier.website}`);
    console.log('');
  });

  try {
    const startTime = Date.now();
    const enrichedSuppliers = await enrichSuppliersWithContacts(testSuppliers);
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    console.log(`‚úÖ –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration} —Å–µ–∫`);
    console.log('');

    console.log('='.repeat(70));
    console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–ò:');
    console.log('='.repeat(70));
    console.log('');

    enrichedSuppliers.forEach((supplier, i) => {
      console.log(`${i + 1}. ${supplier.company_name}`);
      console.log(`   üìß Email: ${supplier.email || '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
      console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${supplier.phone || '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
      console.log(`   üåê –í–µ–±-—Å–∞–π—Ç: ${supplier.website}`);
      console.log(`   ‚è∞ –ß–∞—Å —Å–∫—Ä–∞–ø—ñ–Ω–≥—É: ${supplier.contacts_scraped_at || '–Ω–µ —Å–∫—Ä–∞–ø–∏–ª–æ—Å—å'}`);
      console.log('');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const withEmail = enrichedSuppliers.filter(s => s.email).length;
    const withPhone = enrichedSuppliers.filter(s => s.phone).length;

    console.log('='.repeat(70));
    console.log('–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('='.repeat(70));
    console.log(`üìä –í—Å—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${enrichedSuppliers.length}`);
    console.log(`üìß –ó email: ${withEmail}/${enrichedSuppliers.length} (${((withEmail / enrichedSuppliers.length) * 100).toFixed(1)}%)`);
    console.log(`üìû –ó —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${withPhone}/${enrichedSuppliers.length} (${((withPhone / enrichedSuppliers.length) * 100).toFixed(1)}%)`);
    console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${duration} —Å–µ–∫`);
    console.log(`‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞: ${(parseFloat(duration) / enrichedSuppliers.length).toFixed(2)} —Å–µ–∫`);
    console.log('');

    return enrichedSuppliers;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    if (error.stack) {
      console.error('Stack:', error.stack);
    }
    console.error('');
    return null;
  }
}

async function runAllTests() {
  console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –≤–µ–±-—Å–∫—Ä–∞–ø—ñ–Ω–≥—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤...');
  console.log('');

  // –¢–µ—Å—Ç 1: –û–¥–∏–Ω —Å–∞–π—Ç
  await testSingleScraping();

  console.log('–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏...');
  console.log('');
  await new Promise(resolve => setTimeout(resolve, 2000));

  // –¢–µ—Å—Ç 2: –ö—ñ–ª—å–∫–∞ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
  await testBatchScraping();

  console.log('='.repeat(70));
  console.log('üéâ –í–°–Ü –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(70));
  console.log('');
}

runAllTests().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});
