import 'dotenv/config';
import { searchSuppliers } from './src/services/googleSearchService.js';
import { chatCompletionJson } from './src/services/openaiService.js';

const OPENAI_MODELS = {
  SMART: 'gpt-4o-mini'
};

const TEMPERATURE = {
  FACTUAL: 0.3
};

const MAX_TOKENS = {
  SEARCH: 4000
};

console.log('='.repeat(70));
console.log('–ü–û–í–ù–ò–ô –¢–ï–°–¢: GOOGLE SEARCH + GPT –°–¢–†–£–ö–¢–£–†–£–í–ê–ù–ù–Ø');
console.log('='.repeat(70));
console.log('');

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const GOOGLE_SEARCH_ENGINE_ID = process.env.GOOGLE_SEARCH_ENGINE_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!GOOGLE_API_KEY || !GOOGLE_SEARCH_ENGINE_ID) {
  console.error('–ü–æ–º–∏–ª–∫–∞: Google API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
  process.exit(1);
}

if (!OPENAI_API_KEY) {
  console.error('–ü–æ–º–∏–ª–∫–∞: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
  process.exit(1);
}

const input = {
  productDescription: 'LED —Å–≤—ñ—Ç–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –æ—Ñ—ñ—Å—É',
  quantity: '1000 —à—Ç—É–∫',
  targetPrice: '$5-10 –∑–∞ —à—Ç—É–∫—É',
  additionalRequirements: '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ CE, ISO 9001',
  preferredRegion: 'china'
};

const settings = {
  searchConfig: {
    minSuppliers: 5,
    maxSuppliers: 10
  },
  apiKeys: {
    google: GOOGLE_API_KEY,
    openai: OPENAI_API_KEY
  },
  searchEngineId: GOOGLE_SEARCH_ENGINE_ID
};

console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:');
console.log(`  –ü—Ä–æ–¥—É–∫—Ç: ${input.productDescription}`);
console.log(`  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${input.quantity}`);
console.log(`  –¶—ñ–Ω–∞: ${input.targetPrice}`);
console.log(`  –í–∏–º–æ–≥–∏: ${input.additionalRequirements}`);
console.log(`  –†–µ–≥—ñ–æ–Ω: ${input.preferredRegion}`);
console.log(`  –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: ${settings.searchConfig.minSuppliers}-${settings.searchConfig.maxSuppliers}`);
console.log('');

try {
  // –ö–†–û–ö 1: Google Search
  console.log('–ö–†–û–ö 1: –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ Google Search API...');
  const searchQuery = `${input.productDescription} supplier manufacturer ${input.preferredRegion} B2B wholesale`;
  console.log(`Query: "${searchQuery}"`);
  console.log('');

  const startGoogle = Date.now();
  const googleResults = await searchSuppliers({
    query: searchQuery,
    maxResults: 20,
    apiKey: GOOGLE_API_KEY,
    searchEngineId: GOOGLE_SEARCH_ENGINE_ID
  });
  const googleDuration = ((Date.now() - startGoogle) / 1000).toFixed(2);

  console.log(`‚úÖ Google Search –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${googleDuration} —Å–µ–∫`);
  console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ: ${googleResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
  console.log('');

  console.log('–ü–µ—Ä—à—ñ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ Google:');
  googleResults.slice(0, 3).forEach((r, i) => {
    console.log(`${i + 1}. ${r.title}`);
    console.log(`   URL: ${r.link}`);
    console.log(`   Snippet: ${r.snippet.substring(0, 100)}...`);
    console.log('');
  });

  // –ö–†–û–ö 2: GPT –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è
  console.log('–ö–†–û–ö 2: –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT...');
  console.log('');

  const googleResultsContext = googleResults.map((result, index) => ({
    index: index + 1,
    title: result.title,
    link: result.link,
    snippet: result.snippet,
    displayLink: result.displayLink
  }));

  const structuringPrompt = {
    role: 'system',
    content: `You are a procurement assistant that structures supplier information from Google Search results.

CRITICAL RULES:
1. ONLY use information from the provided Google Search results
2. DO NOT invent or hallucinate any company names, emails, or contact information
3. If contact information is not in the search results, use empty string
4. Extract company name from the website domain or title
5. Use the website link directly from Google results
6. Infer manufacturing capabilities from snippet text only

OUTPUT FORMAT: JSON object with "suppliers" array containing ${settings.searchConfig.minSuppliers}-${settings.searchConfig.maxSuppliers} suppliers.

Each supplier MUST have:
- company_name: Extract from domain or title (REQUIRED)
- website: Direct link from Google (REQUIRED)
- email: Only if found in snippet, otherwise empty string
- phone: Only if found in snippet, otherwise empty string
- country: Infer from domain (.cn = China, etc) or use "${input.preferredRegion}"
- city: Only if mentioned in snippet, otherwise empty string
- manufacturing_capabilities: Infer from product mentions in snippet
- production_capacity: Only if mentioned, otherwise empty string
- certifications: Only if mentioned (ISO, CE, etc), otherwise empty string
- years_in_business: Only if mentioned, otherwise empty string
- estimated_price_range: Only if mentioned, otherwise empty string
- minimum_order_quantity: Only if mentioned, otherwise empty string

PRODUCT REQUIREMENTS:
- Product: ${input.productDescription}
- Quantity: ${input.quantity}
- Target Price: ${input.targetPrice}
- Additional: ${input.additionalRequirements}
- Region: ${input.preferredRegion}`
  };

  const userPrompt = {
    role: 'user',
    content: `Here are ${googleResults.length} REAL supplier search results from Google. Structure them into the supplier format.

GOOGLE SEARCH RESULTS:
${JSON.stringify(googleResultsContext, null, 2)}

Return ONLY suppliers that match the product requirements. Prioritize results with clear B2B/manufacturer indicators.`
  };

  const startGPT = Date.now();
  const structuredSuppliers = await chatCompletionJson({
    model: OPENAI_MODELS.SMART,
    messages: [structuringPrompt, userPrompt],
    temperature: TEMPERATURE.FACTUAL,
    maxTokens: MAX_TOKENS.SEARCH,
    apiKey: OPENAI_API_KEY
  });
  const gptDuration = ((Date.now() - startGPT) / 1000).toFixed(2);

  console.log(`‚úÖ GPT —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${gptDuration} —Å–µ–∫`);
  console.log('');

  const suppliers = structuredSuppliers.suppliers || [];

  console.log('='.repeat(70));
  console.log(`–ó–ù–ê–ô–î–ï–ù–û –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–Ü–í: ${suppliers.length}`);
  console.log('='.repeat(70));
  console.log('');

  suppliers.forEach((supplier, index) => {
    console.log(`${index + 1}. ${supplier.company_name}`);
    console.log(`   üìß Email: ${supplier.email || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${supplier.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üåç –ö—Ä–∞—ó–Ω–∞: ${supplier.country}`);
    console.log(`   üèôÔ∏è  –ú—ñ—Å—Ç–æ: ${supplier.city || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üåê –í–µ–±-—Å–∞–π—Ç: ${supplier.website || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ: ${supplier.manufacturing_capabilities || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üì¶ –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: ${supplier.production_capacity || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   ‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏: ${supplier.certifications || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üìÖ –†–æ–∫—ñ–≤ –≤ –±—ñ–∑–Ω–µ—Å—ñ: ${supplier.years_in_business || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üí∞ –¶—ñ–Ω–∞: ${supplier.estimated_price_range || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üìä MOQ: ${supplier.minimum_order_quantity || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
    console.log('');
  });

  console.log('='.repeat(70));
  console.log('–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(70));

  const withEmail = suppliers.filter(s => s.email).length;
  const withPhone = suppliers.filter(s => s.phone).length;
  const withWebsite = suppliers.filter(s => s.website).length;
  const withCertifications = suppliers.filter(s => s.certifications).length;

  console.log(`‚úÖ –ó email: ${withEmail}/${suppliers.length}`);
  console.log(`‚úÖ –ó —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${withPhone}/${suppliers.length}`);
  console.log(`‚úÖ –ó –≤–µ–±-—Å–∞–π—Ç–æ–º: ${withWebsite}/${suppliers.length}`);
  console.log(`‚úÖ –ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞–º–∏: ${withCertifications}/${suppliers.length}`);
  console.log('');
  console.log(`‚è±Ô∏è  Google Search: ${googleDuration} —Å–µ–∫`);
  console.log(`‚è±Ô∏è  GPT Structure: ${gptDuration} —Å–µ–∫`);
  console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª–æ–º: ${((Date.now() - startGoogle) / 1000).toFixed(2)} —Å–µ–∫`);
  console.log('');
  console.log('üéâ –¢–ï–°–¢ –£–°–ü–Ü–®–ù–ò–ô! –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è Google + GPT –ø—Ä–∞—Ü—é—î');
  console.log('');

} catch (error) {
  console.error('');
  console.error('‚ùå –ü–û–ú–ò–õ–ö–ê:');
  console.error('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
  if (error.status) {
    console.error('HTTP —Å—Ç–∞—Ç—É—Å:', error.status);
  }
  if (error.stack) {
    console.error('Stack:', error.stack);
  }
  console.error('');
  process.exit(1);
}
